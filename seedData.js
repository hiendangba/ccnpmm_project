const mongoose = require('mongoose');
const bcrypt = require('bcryptjs');
const User = require('./src/models/user.model');
const Post = require('./src/models/post.model');
const Message = require('./src/models/message.model');
const Conversation = require('./src/models/conversation.model');
const Friendship = require('./src/models/friendship.model');
const FriendRequest = require('./src/models/friendrequest.model');
require('dotenv').config();

async function seedData() {
    try {
        // K·∫øt n·ªëi database
        await mongoose.connect(process.env.MONGO_URI || 'mongodb://localhost:27017/ccnpmm_project');
        console.log('Connected to MongoDB');

        // X√≥a data c≈© (optional)
        await User.deleteMany({});
        await Post.deleteMany({});
        await Message.deleteMany({});
        await Conversation.deleteMany({});
        await Friendship.deleteMany({});
        await FriendRequest.deleteMany({});
        console.log('Cleared existing data');

        // T·∫°o users
        const users = [
            {
                name: 'Nguy·ªÖn VƒÉn Admin',
                mssv: 'ADMIN001',
                email: 'admin@ute.edu.vn',
                password: await bcrypt.hash('admin123', 10),
                role: 'admin',
                gender: 'nam',
                bio: 'Qu·∫£n tr·ªã vi√™n h·ªá th·ªëng',
                address: 'TP.HCM',
                avatar: 'https://via.placeholder.com/150/007bff/ffffff?text=Admin'
            },
            {
                name: 'Tr·∫ßn Th·ªã Hoa',
                mssv: 'SV001',
                email: 'hoa@ute.edu.vn',
                password: await bcrypt.hash('123456', 10),
                role: 'user',
                gender: 'n·ªØ',
                bio: 'Sinh vi√™n nƒÉm 3 ng√†nh C√¥ng ngh·ªá th√¥ng tin',
                address: 'Qu·∫≠n 1, TP.HCM',
                avatar: 'https://via.placeholder.com/150/28a745/ffffff?text=Hoa'
            },
            {
                name: 'L√™ Minh Tu·∫•n',
                mssv: 'SV002',
                email: 'tuan@ute.edu.vn',
                password: await bcrypt.hash('123456', 10),
                role: 'user',
                gender: 'nam',
                bio: 'Sinh vi√™n nƒÉm 2 ng√†nh K·ªπ thu·∫≠t ph·∫ßn m·ªÅm',
                address: 'Qu·∫≠n 3, TP.HCM',
                avatar: 'https://via.placeholder.com/150/dc3545/ffffff?text=Tuan'
            },
            {
                name: 'Ph·∫°m Th·ªã Lan',
                mssv: 'SV003',
                email: 'lan@ute.edu.vn',
                password: await bcrypt.hash('123456', 10),
                role: 'user',
                gender: 'n·ªØ',
                bio: 'Sinh vi√™n nƒÉm 4 ng√†nh An to√†n th√¥ng tin',
                address: 'Qu·∫≠n 7, TP.HCM',
                avatar: 'https://via.placeholder.com/150/ffc107/ffffff?text=Lan'
            },
            {
                name: 'Ho√†ng VƒÉn ƒê·ª©c',
                mssv: 'SV004',
                email: 'duc@ute.edu.vn',
                password: await bcrypt.hash('123456', 10),
                role: 'user',
                gender: 'nam',
                bio: 'Sinh vi√™n nƒÉm 1 ng√†nh Khoa h·ªçc m√°y t√≠nh',
                address: 'Qu·∫≠n 10, TP.HCM',
                avatar: 'https://via.placeholder.com/150/17a2b8/ffffff?text=Duc'
            },
            {
                name: 'Nguy·ªÖn Th·ªã Mai',
                mssv: 'SV005',
                email: 'mai@ute.edu.vn',
                password: await bcrypt.hash('123456', 10),
                role: 'user',
                gender: 'n·ªØ',
                bio: 'Sinh vi√™n nƒÉm 3 ng√†nh M·∫°ng m√°y t√≠nh',
                address: 'Qu·∫≠n 5, TP.HCM',
                avatar: 'https://via.placeholder.com/150/6f42c1/ffffff?text=Mai'
            }
        ];

        const createdUsers = await User.insertMany(users);
        console.log(`‚úÖ Created ${createdUsers.length} users`);

        // T·∫°o posts
        const posts = [
            {
                userId: createdUsers[1]._id, // Hoa
                content: 'H√¥m nay h·ªçc React r·∫•t th√∫ v·ªã! Ai c√≥ kinh nghi·ªám v·ªÅ hooks kh√¥ng?',
                images: ['https://via.placeholder.com/400x300/007bff/ffffff?text=React+Learning']
            },
            {
                userId: createdUsers[2]._id, // Tu·∫•n
                content: 'V·ª´a ho√†n th√†nh project Node.js! C·∫£m ∆°n c√°c b·∫°n ƒë√£ h·ªó tr·ª£.',
                images: ['https://via.placeholder.com/400x300/28a745/ffffff?text=NodeJS+Project']
            },
            {
                userId: createdUsers[3]._id, // Lan
                content: 'Chia s·∫ª m·ªôt s·ªë tips v·ªÅ b·∫£o m·∫≠t web application. Mong nh·∫≠n ƒë∆∞·ª£c feedback!',
                images: ['https://via.placeholder.com/400x300/dc3545/ffffff?text=Security+Tips']
            },
            {
                userId: createdUsers[4]._id, // ƒê·ª©c
                content: 'L·∫ßn ƒë·∫ßu h·ªçc l·∫≠p tr√¨nh, c√≥ b·∫°n n√†o c√≥ th·ªÉ h∆∞·ªõng d·∫´n kh√¥ng?',
                images: []
            },
            {
                userId: createdUsers[5]._id, // Mai
                content: 'Tham gia hackathon tu·∫ßn t·ªõi! Team n√†o c·∫ßn member kh√¥ng?',
                images: ['https://via.placeholder.com/400x300/ffc107/ffffff?text=Hackathon']
            },
            {
                userId: createdUsers[1]._id, // Hoa
                content: 'Chia s·∫ª kinh nghi·ªám h·ªçc JavaScript t·ª´ zero to hero!',
                images: ['https://via.placeholder.com/400x300/17a2b8/ffffff?text=JavaScript+Tips']
            }
        ];

        const createdPosts = await Post.insertMany(posts);
        console.log(`‚úÖ Created ${createdPosts.length} posts`);

        // T·∫°o friend requests (accepted friendships)
        const friendRequests = [
            {
                senderId: createdUsers[1]._id, // Hoa
                receiverId: createdUsers[2]._id, // Tu·∫•n
                status: 'accepted',
                message: 'Ch√†o b·∫°n!'
            },
            {
                senderId: createdUsers[1]._id, // Hoa
                receiverId: createdUsers[3]._id, // Lan
                status: 'accepted',
                message: 'K·∫øt b·∫°n nh√©!'
            },
            {
                senderId: createdUsers[2]._id, // Tu·∫•n
                receiverId: createdUsers[4]._id, // ƒê·ª©c
                status: 'accepted',
                message: 'Ch√†o b·∫°n m·ªõi!'
            },
            {
                senderId: createdUsers[3]._id, // Lan
                receiverId: createdUsers[5]._id, // Mai
                status: 'accepted',
                message: 'H·ªçc c√πng nhau nh√©!'
            },
            {
                senderId: createdUsers[4]._id, // ƒê·ª©c
                receiverId: createdUsers[5]._id, // Mai
                status: 'accepted',
                message: 'Ch√†o b·∫°n!'
            }
        ];

        const createdFriendRequests = await FriendRequest.insertMany(friendRequests);
        console.log(`‚úÖ Created ${createdFriendRequests.length} friend requests (accepted)`);

        // T·∫°o conversations (theo ƒë√∫ng format c·ªßa h·ªá th·ªëng)
        const conversations = [
            {
                members: [createdUsers[1]._id, createdUsers[2]._id], // Hoa - Tu·∫•n
                createdBy: createdUsers[1]._id,
                isGroup: false,
                name: null
            },
            {
                members: [createdUsers[1]._id, createdUsers[3]._id], // Hoa - Lan
                createdBy: createdUsers[1]._id,
                isGroup: false,
                name: null
            },
            {
                members: [createdUsers[2]._id, createdUsers[4]._id], // Tu·∫•n - ƒê·ª©c
                createdBy: createdUsers[2]._id,
                isGroup: false,
                name: null
            }
        ];

        const createdConversations = await Conversation.insertMany(conversations);
        console.log(`‚úÖ Created ${createdConversations.length} conversations`);

        // T·∫°o messages
        const messages = [
            {
                conversationId: createdConversations[0]._id,
                senderId: createdUsers[1]._id.toString(),
                content: 'Ch√†o Tu·∫•n! B·∫°n c√≥ th·ªÉ gi√∫p m√¨nh v·ªÅ React hooks kh√¥ng?',
                type: 'text'
            },
            {
                conversationId: createdConversations[0]._id,
                senderId: createdUsers[2]._id.toString(),
                content: 'Ch√†o Hoa! T·∫•t nhi√™n r·ªìi, m√¨nh s·∫Ω gi√∫p b·∫°n.',
                type: 'text'
            },
            {
                conversationId: createdConversations[1]._id,
                senderId: createdUsers[1]._id.toString(),
                content: 'Lan ∆°i, b·∫°n c√≥ t√†i li·ªáu v·ªÅ b·∫£o m·∫≠t web kh√¥ng?',
                type: 'text'
            },
            {
                conversationId: createdConversations[1]._id,
                senderId: createdUsers[3]._id.toString(),
                content: 'C√≥ ch·ª©! M√¨nh s·∫Ω g·ª≠i cho b·∫°n sau.',
                type: 'text'
            },
            {
                conversationId: createdConversations[2]._id,
                senderId: createdUsers[2]._id.toString(),
                content: 'ƒê·ª©c ∆°i, b·∫°n c√≥ mu·ªën tham gia project c√πng m√¨nh kh√¥ng?',
                type: 'text'
            }
        ];

        const createdMessages = await Message.insertMany(messages);
        console.log(`‚úÖ Created ${createdMessages.length} messages`);

        console.log('\nüéâ Data seeding completed successfully!');
        console.log('\nüìã Test accounts:');
        console.log('Admin:');
        console.log('  MSSV: ADMIN001');
        console.log('  Password: admin123');
        console.log('\nUsers:');
        console.log('  MSSV: SV001, Password: 123456 (Hoa)');
        console.log('  MSSV: SV002, Password: 123456 (Tu·∫•n)');
        console.log('  MSSV: SV003, Password: 123456 (Lan)');
        console.log('  MSSV: SV004, Password: 123456 (ƒê·ª©c)');
        console.log('  MSSV: SV005, Password: 123456 (Mai)');

    } catch (error) {
        console.error('Error seeding data:', error);
    } finally {
        await mongoose.disconnect();
        console.log('Disconnected from MongoDB');
    }
}

// Ch·∫°y script
seedData();
